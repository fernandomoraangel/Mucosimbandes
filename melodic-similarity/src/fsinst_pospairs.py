import pandas as pd
import subprocess
import os.path
from itertools import dropwhile
import csv

# These paths must exist:
# ${mtcroot}/MTC-FS-INST-2.0/metadata
# ${mtcjsonroot}/MTC-FS-INST-2.0/json

# nlbdistmat must be installed
# nlbdistmat is part of libmusical ()

parser = argparse.ArgumentParser(description='Convert MTC .krn to feature sequences')
parser.add_argument('-mtcroot', metavar='mtcroot', type=str, help='path to MTC to find metadata', default='/Users/pvk/data/MTC/')
parser.add_argument('-mtcjsonroot', metavar='mtcjsonroot', type=str, help='mtcroot for json files as generated by krn2json', default='/Users/pvk/data/MTCjson/')
args = parser.parse_args()

mtcfsroot = mtcroot + 'MTC-FS-INST-2.0/'
mtcfsjsondir = mtcjsonroot + 'MTC-FS-INST-2.0/json/'

def write_distmat(ids, name='distmat'):
    with open(name+'.flist','w') as f:
        for nlbid in ids:
            path = mtcfsjsondir + nlbid + '.json'
            if os.path.isfile(path):
                f.write(path + '\n')
    command = ' '.join(['nlbdistmat', name+'.flist', name+'.flist', name+'_distmat.txt'])
    if subprocess.call(command, shell=True) != 0:
        print("Error")

def distmat2pairs(distmatpath):
    with open(distmatpath,'r') as f:
        reader = csv.reader(f, delimiter='\t')
        header = next(reader)
        ids = header[1:]
        for i, row in enumerate(reader):
            nlbid1 = row[0]
            for j in range(i+1,len(row)-1):
                yield ','.join([nlbid1,ids[j],row[j+1]])


fsinst_metadata = pd.read_csv(mtcfsroot+'metadata/MTC-FS-INST-2.0.csv', na_filter=False, index_col=0, header=None, encoding='utf8', names=["filename","songid","source_id","serial_number","page","singer_id_s","date_of_recording","place_of_recording","latitude","longitude","textfamily_id","title","firstline","tunefamily_id","tunefamily","type","voice_stanza_number","voice_stanza","image_filename_s","audio_filename","variation","confidence","comment","MTC_title","author"])

fsinst_metadata_bytf = fsinst_metadata.groupby('tunefamily_id')
tfs = fsinst_metadata_bytf.groups.copy()
tfs.pop('') #remove songs not in a tune family

#create distmats
for tf in tfs.keys():
    if len(tfs[tf]) >= 10:
        write_distmat(tfs[tf], tf)

#create pair csv'
for tf in tfs.keys():
    if len(tfs[tf]) >= 10:
        with open(tf+'_pairs.csv','w') as f:
            for p in distmat2pairs(tf+'_distmat.txt'):
                f.write(p+'\n')
