import pandas as pd
import os

# select only those songs from MTC-FS-INST 2.0 which are unrelated to the tune families
# in MTC-ANN 2.0.1
# And write flist files for this selection and for the songs in MTC-ANN (queries)

parser = argparse.ArgumentParser(description='Selection of MTC-unrelated songs from MTC-FS-INST')
parser.add_argument('-mtcroot', metavar='mtcroot', type=str, help='path to MTC to find metadata', default='/Users/pvk/data/MTC/')
parser.add_argument('-mtcjsonroot', metavar='mtcjsonroot', type=str, help='mtcroot for json files as generated by krn2json', default='/Users/pvk/data/MTCjson/')
args = parser.parse_args()

mtcannroot = mtcroot + 'MTC-ANN-2.0.1/'
mtcfsroot = mtcroot + 'MTC-FS-INST-2.0/'

mtcannjsondir = mtcjsonroot + 'MTC-ANN-2.0.1/json/'
mtcfsjsondir = mtcjsonroot + 'MTC-FS-INST-2.0/json/'

mtcann_metadata = pd.read_csv(mtcannroot+'metadata/MTC-ANN-tune-family-labels.csv', na_filter=False, index_col=0, header=None, encoding='utf8', names=['ID','TuneFamily'])
mtcfsinst_metadata = pd.read_csv(mtcfsroot+'metadata/MTC-FS-INST-2.0.csv', na_filter=False, index_col=0, header=None, encoding='utf8', names=["filename","songid","source_id","serial_number","page","singer_id_s","date_of_recording","place_of_recording","latitude","longitude","textfamily_id","title","firstline","tunefamily_id","tunefamily","type","voice_stanza_number","voice_stanza","image_filename_s","audio_filename","variation","confidence","comment","MTC_title","author"])

#retrieve tf ids of mtc-ann tune families in mtc-fs-inst
tfids = set(mtcfsinst_metadata.loc[mtcann_metadata.index,'tunefamily_id'])
tfids.remove('')
tfids = {tf.split('_')[0] for tf in tfids}

alltfids = set(mtcfsinst_metadata['tunefamily_id'])
alltfids.remove('')

sel_tfids = {tfid for tfid in alltfids if tfid.split('_')[0] in tfids}

# now sel_tfids contains all tunefamily_ids of tune families related to the tune families in mtc-ann

#select songs not in tfs related to mtc-ann
bg_corpus_mask = ~mtcfsinst_metadata['tunefamily_id'].isin(list(sel_tfids))
bg_corpus = mtcfsinst_metadata[bg_corpus_mask]
#remove songs without tune family label
bg_corpus = bg_corpus.loc[bg_corpus.tunefamily_id != '']

# now bg_corpus contains all songs unrelated to mtc-ann's tune families

#create flist of combined mtc and bg_corpus
with open('mtcann_with_bgcorpus.flist','w') as f:
    for nlbid in bg_corpus.index:
        path = mtcfsjsondir + nlbid + '.json'
        if os.path.isfile(path):
            f.write(path + '\n')
    for nlbid in mtcann_metadata.index:
        path = mtcannjsondir + nlbid + '.json'
        if os.path.isfile(path):
            f.write(path + '\n')
#create flist of mtc ann only
with open('mtcann.flist','w') as f:
    for nlbid in mtcann_metadata.index:
        path = mtcannjsondir + nlbid + '.json'
        if os.path.isfile(path):
            f.write(path + '\n')

